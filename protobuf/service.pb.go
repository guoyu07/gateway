// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

/*
Package store is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	ServiceRequest
	ServiceReply
*/
package store

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServiceRequest struct {
	Name   string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Labels []string `protobuf:"bytes,2,rep,name=labels" json:"labels,omitempty"`
}

func (m *ServiceRequest) Reset()                    { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()               {}
func (*ServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceRequest) GetLabels() []string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ServiceReply struct {
	Ok     bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Result string `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *ServiceReply) Reset()                    { *m = ServiceReply{} }
func (m *ServiceReply) String() string            { return proto.CompactTextString(m) }
func (*ServiceReply) ProtoMessage()               {}
func (*ServiceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServiceReply) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *ServiceReply) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*ServiceRequest)(nil), "store.ServiceRequest")
	proto.RegisterType((*ServiceReply)(nil), "store.ServiceReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceRegistry service

type ServiceRegistryClient interface {
	RegisterService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error)
}

type serviceRegistryClient struct {
	cc *grpc.ClientConn
}

func NewServiceRegistryClient(cc *grpc.ClientConn) ServiceRegistryClient {
	return &serviceRegistryClient{cc}
}

func (c *serviceRegistryClient) RegisterService(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceReply, error) {
	out := new(ServiceReply)
	err := grpc.Invoke(ctx, "/store.ServiceRegistry/RegisterService", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceRegistry service

type ServiceRegistryServer interface {
	RegisterService(context.Context, *ServiceRequest) (*ServiceReply, error)
}

func RegisterServiceRegistryServer(s *grpc.Server, srv ServiceRegistryServer) {
	s.RegisterService(&_ServiceRegistry_serviceDesc, srv)
}

func _ServiceRegistry_RegisterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceRegistryServer).RegisterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/store.ServiceRegistry/RegisterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceRegistryServer).RegisterService(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "store.ServiceRegistry",
	HandlerType: (*ServiceRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterService",
			Handler:    _ServiceRegistry_RegisterService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2d, 0x2e, 0xc9, 0x2f, 0x4a,
	0x55, 0xb2, 0xe1, 0xe2, 0x0b, 0x86, 0x88, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09,
	0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9, 0x42,
	0x62, 0x5c, 0x6c, 0x39, 0x89, 0x49, 0xa9, 0x39, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0x9c, 0x41,
	0x50, 0x9e, 0x92, 0x19, 0x17, 0x0f, 0x5c, 0x77, 0x41, 0x4e, 0xa5, 0x10, 0x1f, 0x17, 0x53, 0x7e,
	0x36, 0x58, 0x27, 0x47, 0x10, 0x53, 0x7e, 0x36, 0x48, 0x5f, 0x51, 0x6a, 0x71, 0x69, 0x4e, 0x89,
	0x04, 0x13, 0xd8, 0x34, 0x28, 0xcf, 0x28, 0x88, 0x8b, 0x1f, 0xae, 0x2f, 0x3d, 0xb3, 0xb8, 0xa4,
	0xa8, 0x52, 0xc8, 0x9e, 0x8b, 0x1f, 0xc2, 0x4e, 0x2d, 0x82, 0x4a, 0x09, 0x89, 0xea, 0x81, 0xdd,
	0xa8, 0x87, 0xea, 0x40, 0x29, 0x61, 0x74, 0xe1, 0x82, 0x9c, 0x4a, 0x25, 0x86, 0x24, 0x36, 0xb0,
	0xbf, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37, 0x25, 0xdb, 0x81, 0xe8, 0x00, 0x00, 0x00,
}
